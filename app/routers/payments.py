from fastapi import APIRouter, HTTPException, Request
from datetime import datetime, timedelta
import decimal
import aiohttp
from app.models import Payment, User, Subscription, SubscriptionType, PaymentType, Consultation
from app.settings import settings
from app.utils.robokassa import verify_payment_signature
from app.utils.telegram import send_consultation_payment_notification, send_consultation_paid_to_user

router = APIRouter()


@router.get("/robokassa/callback")
async def robokassa_callback(request: Request):
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã"""
    params = dict(request.query_params)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback
    payment_id = int(params.get("InvId"))
    tg_id = int(params.get("Shp_id"))
    shp_type = params.get("Shp_type", "subscription")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Shp_type –∫–∞–∫ –≤ backend
    subscription_type_str = params.get("Shp_subscription_type", "unlimited")
    out_sum = decimal.Decimal(params.get("OutSum", "0"))
    signature_value = params.get("SignatureValue", "")
    
    custom_params = {k: v for k, v in params.items() if k.startswith("Shp_")}
    if not verify_payment_signature(
        out_sum=out_sum,
        invoice_id=payment_id,
        signature_value=signature_value,
        **custom_params
    ):
        raise HTTPException(status_code=400, detail="Invalid signature")
    
    payment = await Payment.get_or_none(id=payment_id)
    if not payment:
        raise HTTPException(status_code=404, detail="Payment not found")

    if payment.price != int(out_sum):
        raise HTTPException(status_code=400, detail="Amount mismatch")

    # –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
    payment.is_paid = True
    payment.paid_at = datetime.now()
    await payment.save()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ Shp_type –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    if shp_type == "subscription":
        await _process_subscription_payment(payment, subscription_type_str)
    elif shp_type == "material":
        await _process_material_payment(payment)
    elif shp_type == "consultation":
        await _process_consultation_payment(payment)
    else:
        # Fallback –Ω–∞ payment_type –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ Shp_type –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        if payment.payment_type == PaymentType.SUBSCRIPTION:
            await _process_subscription_payment(payment, subscription_type_str)
        elif payment.payment_type == PaymentType.MATERIAL:
            await _process_material_payment(payment)
        elif payment.payment_type == PaymentType.CONSULTATION:
            await _process_consultation_payment(payment)

    return f"OK{payment_id}"


async def _process_subscription_payment(payment: Payment, subscription_type_str: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"""
    user = await payment.user
    subscription, _ = await Subscription.get_or_create(user=user)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_type = SubscriptionType(subscription_type_str)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    now = datetime.now()
    date_start = now
    if (subscription.subscription_type != SubscriptionType.FREE and 
        subscription_type == SubscriptionType.SPECIAL and 
        subscription.expires_at):
        date_start = subscription.expires_at

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription_type in [SubscriptionType.UNLIMITED, SubscriptionType.PREMIUM]:
        expires_at = date_start + timedelta(days=30)
    elif subscription_type == SubscriptionType.SPECIAL:
        expires_at = date_start + timedelta(days=90)
    else:
        raise HTTPException(status_code=400, detail="Unknown subscription type")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription.payment = payment
    subscription.subscription_type = subscription_type
    subscription.expires_at = expires_at
    subscription.is_active = True
    await subscription.save()
    send_consultation_payment_notification


async def _process_material_payment(payment: Payment):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª"""
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ ID –∏–∑ –ø–æ–ª—è material_ids
    if payment.material_ids:
        # –í—ã–∑—ã–≤–∞–µ–º backend —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        await send_materials_via_backend(
            tg_id=payment.user_id,
            material_ids=payment.material_ids,
            message="–í–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≥–æ—Ç–æ–≤—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É."
        )


async def _process_consultation_payment(payment: Payment):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø–ª–∞—Ç–µ–∂–æ–º
    consultations = await Consultation.filter(payment=payment)
    
    if not consultations:
        print(f"No consultations found for payment {payment.id}")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
    consultations_info = []
    for consultation in consultations:
        consultation.is_paid = True
        await consultation.save()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        consultations_info.append({
            "id": consultation.id,
            "price": consultation.price,
            "name": consultation.name,
            "email": consultation.email,
            "tg_tag": consultation.tg_tag,
            "specialist_id": consultation.specialist_id,
            "service_id": consultation.service_id
        })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram
    await send_consultation_payment_notification(
        payment_id=payment.id,
        user_tg_id=payment.user_id,
        consultations_info=consultations_info
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_consultation_paid_to_user(
        user_tg_id=payment.user_id,
        payment_id=payment.id,
        consultations_count=len(consultations_info)
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print(f"‚úÖ Consultation payment {payment.id} processed successfully for user {payment.user_id}")
    print(f"üìä Processed {len(consultations_info)} consultations")


async def send_materials_via_backend(tg_id: int, material_ids: list, message: str):
    """–í—ã–∑—ã–≤–∞–µ—Ç backend —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    backend_url = f"{settings.BACKEND_URL}/materials/send-after-payment"
    
    payload = {
            "tg_id": tg_id,
            "material_ids": material_ids,
            "message": message
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(backend_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"Materials sent successfully: {result}")
                else:
                    print(f"Failed to send materials: {response.status} - {await response.text()}")
    except Exception as e:
        print(f"Error calling backend: {e}")

