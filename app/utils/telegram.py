import aiohttp
from typing import List, Optional
from app.settings import settings


async def send_telegram_message(chat_id: str, message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç"""
    if not settings.TELEGRAM_BOT_TOKEN:
        print("TELEGRAM_BOT_TOKEN not configured")
        return False
    
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    return True
                else:
                    print(f"Failed to send Telegram message: {response.status}")
                    return False
    except Exception as e:
        print(f"Error sending Telegram message: {e}")
        return False


async def send_consultation_payment_notification(
    payment_id: int,
    user_tg_id: int,
    consultations_info: List[dict]
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    if not settings.INFO_CHAT:
        print("INFO_CHAT not configured")
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üí∞ <b>–û–ø–ª–∞—á–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!</b>\n\n"
    message += f"üí∞ <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!</b>\n\n"

    message += f"üÜî <b>–ü–ª–∞—Ç–µ–∂:</b> {payment_id}\n"
    message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_tg_id}\n\n"
    
    message += f"üìã <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ({len(consultations_info)}):</b>\n"
    
    for i, consultation in enumerate(consultations_info, 1):
        message += f"{i}. <b>ID:</b> {consultation['id']}\n"
        message += f"   üí∞ <b>–¶–µ–Ω–∞:</b> {consultation['price']} —Ä—É–±.\n"
        if consultation.get('name'):
            message += f"   üë§ <b>–ò–º—è:</b> {consultation['name']}\n"
        if consultation.get('email'):
            message += f"   üìß <b>Email:</b> {consultation['email']}\n"
        if consultation.get('tg_tag'):
            message += f"   üè∑Ô∏è <b>Telegram:</b> @{consultation['tg_tag']}\n"
        message += f"   üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ID:</b> {consultation['specialist_id']}\n"
        message += f"   üîß <b>–°–µ—Ä–≤–∏—Å ID:</b> {consultation['service_id']}\n\n"
    
    return await send_telegram_message(settings.INFO_CHAT, message)


async def send_consultation_paid_to_user(
    user_tg_id: int,
    payment_id: int,
    consultations_count: int
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    user_message = f"‚úÖ <b>–í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–ø–ª–∞—á–µ–Ω–∞!</b>\n\n"
    user_message += f"üìã <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ–ø–ª–∞—á–µ–Ω–æ:</b> {consultations_count}\n\n"
    user_message += f"üë®‚Äçüíº <b>–° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.</b>\n\n"
    user_message += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–∏—Ö —É—Å–ª—É–≥! üôè"
    
    return await send_telegram_message(str(user_tg_id), user_message)
